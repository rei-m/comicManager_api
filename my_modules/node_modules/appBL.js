var mongoose = require('mod/cmnDb'),
    logger = require('mod/logger'),
    Comic = require('mod/model/comic').getModel(mongoose),
    SalesInfo = require('mod/model/salesInfo').getModel(mongoose);

exports.respondMasterInfo = function(req, res, next) {

  logger.info(req.getQuery());

  // パラメータ取得
  var params = getQuery(req.getQuery()),
      key = getFindKey(params.key);
  if(key !== ""){
    Comic.find({key: new RegExp(key)}, function(err, docs){
      var json = {},
          aryDocs = [];
      json.results_count = docs.length;
      for(var i=0,len=docs.length;i<len;i++){
        aryDocs[i] = {
          title : docs[i].title,
          author : docs[i].author,
          publisher : docs[i].publisher
        };
      }
      json.results_masterInfo = aryDocs;
      res.send(json);
    });
  }else{
    res.send(makeErrorResponse());
  }
};

exports.respondSalesInfo = function(req, res, next) {

  logger.info(req.getQuery());

  // パラメータ取得
  var params = getQuery(req.getQuery()),
      key = getFindKey(params.key);

  if(key !== "" && params.sf !== void 0 && params.st !== void 0){
    var aryKeys = key.split("||"),
        arySearchKeys = [];
    for(var i=0,len=aryKeys.length;i<len;i++){
      var searchWord = decodeURI(aryKeys[i]);
      searchWord = searchWord.split("　").join("").split(" ").join("");
      if(searchWord !== ""){
        arySearchKeys.push(searchWord);
      }
    }
    if(arySearchKeys.length > 0){
      var re = new RegExp(arySearchKeys.join("|"));

      SalesInfo.find({
        key:re,
        salesDate:{
          "$gte" : makeGMTDate(params.sf),
          "$lte" : makeGMTDate(params.st)
        }
      }, function(err, docs){
        var json = {},
            aryDocs = [];
        json.results_count = docs.length;
        for(var i=0,len=docs.length;i<len;i++){
          aryDocs[i] = {
            id : docs[i]._id,
            title : docs[i].title,
            salesY : docs[i].salesY,
            salesM : docs[i].salesM,
            salesD : docs[i].salesD,
            author : docs[i].author,
            publisher : docs[i].publisher
          };
        }
        json.results_salesInfo = aryDocs;
        res.send(json);
      });
    }else{
      res.send(makeErrorResponse());
    }
  }else{
    res.send(makeErrorResponse());
  }
};

function makeGMTDate(strYMD){
  var year = strYMD.substr(0, 4),
      month = strYMD.substr(4, 2),
      day = strYMD.substr(6, 2);
  return new Date(year + "-" + month + "-" + day + "T00:00:00.000+09:00");
}

function makeErrorResponse(){
  var json = {
    results_count : -1,
    results_masterInfo : []
  };
  return json;
}

function getQuery(in_queryString){
  var aryQuery = in_queryString.split("&"),
      params = {};
  for(var _i=0,_len=aryQuery.length; _i<_len;_i++){
    var _ary = aryQuery[_i].split("=");
    params[_ary[0]] = _ary[1];
  }
  return params;
}

function getFindKey(in_str){
  var rtn = "";
  if(is('String', in_str)){
    in_str = decodeURI(in_str);
    rtn = in_str.split("　").join("").split(" ").join("").toLowerCase();
  }
  return rtn;
}

function is(type, obj) {
    var clas = Object.prototype.toString.call(obj).slice(8, -1);
    return obj !== undefined && obj !== null && clas === type;
}